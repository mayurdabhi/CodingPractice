#include <stdio.h>
#include <stdlib.h>


struct ListNode{
	
	int key;
	struct ListNode * next;
};

struct adjList{

	struct ListNode * head;
};

struct Graph{

	int v;
	struct adjList* array;
};


struct Graph* CreateGraph(int vertex){

	struct Graph* g = (struct Graph *) malloc(struct Graph);

	if(!g){
		printf("Memory Error\n");		
	}
	
	int i;

	g->v = vertex;
	
	g->array = (struct adjList*)malloc(vertex * sizeof(struct adjList));
	
	for(i=0;i<vertex;i++){
		
		//Look how the value is assigned
		g->array[i].head = NULL;
		
	}

	return g;
	
}

struct ListNode *  createListNode(int data){
	
	struct ListNode * newNode = (struct ListNode *)malloc(sizeof(struct ListNode));

	newNode->key = data;
	newNode->next = NULL;

	return newNode;


}

void printList(struct ListNode * head){
	
	struct ListNode* temp= head;

	while(temp){
		printf("%d ->",temp->key);
	}
	printf("\n");

}

void printGraph(struct Graph *g){
	
	int i;
	for(i=0;i<g->v;i++){
		
		printf("Adjacency List for %d :\n ",i);
		printList(g->array[i].head);
		
	}
}

int addEdge(struct Graph * g, int src, int dest)
{

	//for undirectional graph add node to both list;

	struct ListNode * destNode = createListNode(dest);
	
	destNode->next = g->array[src].head;
	g->array[src].head = destNode;

	struct ListNode * srcNode = createListNode(src);
	
	srcNode->next = g->array[dest].head;
	g->array[dest].head = srcNode;	

}


int main(){

	
	struct Graph graph = CreateGraph(5);

	  addEdge(graph, 0, 1);
	  addEdge(graph, 0, 4);
    	  addEdge(graph, 1, 2);
	  addEdge(graph, 1, 3);
	  addEdge(graph, 1, 4);
	  addEdge(graph, 2, 3);
	addEdge(graph, 3, 4);
 
    // print the adjacency list representation of the above graph
    printGraph(graph);
	
	return 0;
}